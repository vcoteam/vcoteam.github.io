<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>API on vCO Team</title>
    <link>http://new.vcoteam.info/tags/api.html</link>
    <description>Recent content in API on vCO Team</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Apr 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://new.vcoteam.info/tags/api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introducing Swagger UI on vRO 7.0.1</title>
      <link>http://new.vcoteam.info/articles/vco-features/310-introducing-swagger-ui-on-vro-7-0-x.html</link>
      <pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://new.vcoteam.info/articles/vco-features/310-introducing-swagger-ui-on-vro-7-0-x.html</guid>
      <description>Although vRealize Orchestrator (vRO) has provided API documentation built-in to the server, it was static content that could not be quickly used for tests or building queries. When a product provides a nice API explorer that not only tells you the available urls and basic docs, but also provides a web-based UI that allows you to quickly build up custom calls and shows you the generated content, the consumption and integration time for developers is reduced considerably.</description>
    </item>
    
    <item>
      <title>How to use PowerShell to start an Orchestrator Workflow</title>
      <link>http://new.vcoteam.info/articles/learn-vco/297-how-to-use-powershell-to-start-an-orchestrator-workflow-2.html</link>
      <pubDate>Fri, 30 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://new.vcoteam.info/articles/learn-vco/297-how-to-use-powershell-to-start-an-orchestrator-workflow-2.html</guid>
      <description>Okay now I have provided Python and [perl](/articles/learn-vco/296-how-to-use-perl-to-start-an-orchestrator-workflow.html&amp;rdquo; rel=&amp;quot;alternate) articles to start a vRealize Orchestrator (vRO / vCO) workflow via it&amp;rsquo;s REST API so now it&amp;rsquo;s time for a PowerShell script. For this article, I followed the same format as the previous two BUT provided the option to call the script with command line parameters! You may download the script in this article from my vroClientScripts Repository on GitHub.
The Script The following code should be saved as something like runWorkflow.</description>
    </item>
    
    <item>
      <title>How to use perl to start an Orchestrator Workflow</title>
      <link>http://new.vcoteam.info/articles/learn-vco/296-how-to-use-perl-to-start-an-orchestrator-workflow.html</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://new.vcoteam.info/articles/learn-vco/296-how-to-use-perl-to-start-an-orchestrator-workflow.html</guid>
      <description>In a previous article, I taught you how to explore and use the REST API to start a Workflow using a generic browser based REST Client. In this article, I will provide a perl based example of running the &amp;ldquo;Create a Record&amp;rdquo; workflow that was created in Part 2 of my SQL Plug-in Dynamic Types Simple CMDB for vCAC article. I have barely more experience with perl than Python so this will be another very short article!</description>
    </item>
    
    <item>
      <title>How to use Python to start an Orchestrator Workflow</title>
      <link>http://new.vcoteam.info/articles/learn-vco/295-how-to-use-python-to-start-an-orchestrator-workflow.html</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://new.vcoteam.info/articles/learn-vco/295-how-to-use-python-to-start-an-orchestrator-workflow.html</guid>
      <description>In a previous article, I taught you how to explore and use the REST API to start a Workflow using a generic browser based REST Client. In this article, I will provide a Python based example of running the &amp;ldquo;Create a Record&amp;rdquo; workflow that was created in Part 2 of my SQL Plug-in Dynamic Types Simple CMDB for vCACarticle. Since I&amp;rsquo;m not even close to being proficient with Python, this will be a very short article!</description>
    </item>
    
    <item>
      <title>How to use the REST API to Resume a Failed Workflow</title>
      <link>http://new.vcoteam.info/articles/learn-vco/284-how-to-use-the-rest-api-to-resume-a-failed-workflow.html</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://new.vcoteam.info/articles/learn-vco/284-how-to-use-the-rest-api-to-resume-a-failed-workflow.html</guid>
      <description>One of the relatively new 5.x features of vCenter Orchestrator (vCO) is the ability to Enable a workflow to resume on failure. Essentially, this means that a workflow could fail 1/2 or 3/4 the way through and you could go and tell vCO to resume that workflow, perhaps after fixing whatever issue caused it to fail in the first place, rather than start a fresh instance of the workflow.
Introduction   As noted in the intro snippet, vCO now has the ability to let you resume a failed workflow.</description>
    </item>
    
    <item>
      <title>How to Enable vCO 5.1.x to log API requests</title>
      <link>http://new.vcoteam.info/articles/learn-vco/270-how-to-enable-vco-51x-to-log-api-requests.html</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://new.vcoteam.info/articles/learn-vco/270-how-to-enable-vco-51x-to-log-api-requests.html</guid>
      <description>When working with new integrations that utilize the vCenter Orchestrator (vCO) REST API you may want additional logging on the vCO side to see what is happening. I came across this need on a recent project. By default, vCO is logging workflow and webview activities but not API calls. This short article walks you through the steps necessary to enable such logging.
The following steps will enable additional logging on your vCO server.</description>
    </item>
    
    <item>
      <title>How to use the REST API to Start a Workflow</title>
      <link>http://new.vcoteam.info/articles/learn-vco/268-how-to-use-the-rest-api-to-start-a-workflow.html</link>
      <pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://new.vcoteam.info/articles/learn-vco/268-how-to-use-the-rest-api-to-start-a-workflow.html</guid>
      <description>It seems everyday the interest in vCenter Orchestrator (vCO) is growing. I love this because it brings more and more use cases to our attention. One such use case is the need to call vCO workflows via its REST API. In order to keep this article generic, but useful, I will work with the free RESTClient plug-in/add-on for Firefox as the client. The general process here will be similar to what you may need to do from your software or portal to integrate with vCO&amp;rsquo;s REST API.</description>
    </item>
    
  </channel>
</rss>