<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DynamicTypes on </title>
    <link>http://localhost:1313/tags/dynamictypes.html</link>
    <description>Recent content in DynamicTypes on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Mar 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/dynamictypes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Plug-in Generator v2 advanced techniques</title>
      <link>http://localhost:1313/articles/learn-vco/302-create-a-plug-in-for-orchestrator.html</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/articles/learn-vco/302-create-a-plug-in-for-orchestrator.html</guid>
      <description>In previous tutorials we created inventory object types, their children objects, workflows to operate these that we packaged for our end users.
In this tutorial we are going to create an orchestrator plug-in to list vCO / vRO workflows ! You may wonder why doing so ?
This is a good use case for leveraging some of the more advanced features of the plug-in generator v2 to handle complex REST APIs and improving performance when needed.</description>
    </item>
    
    <item>
      <title>Create a plug-in for a REST based web service in minutes - Part 4</title>
      <link>http://localhost:1313/articles/learn-vco/301-create-a-plug-in-for-a-rest-based-web-service-in-minutes-part-4.html</link>
      <pubDate>Fri, 27 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/articles/learn-vco/301-create-a-plug-in-for-a-rest-based-web-service-in-minutes-part-4.html</guid>
      <description>In part 1 and part 2 we created the inventory objects, in part 3 we created methods for this objects and ran a generic workflow to run these methods.
In this article we will create workflows for calling these methods, include them in a package with all the plug-in configuration to ship it to our end users.
Creating the workflows The invoke workflows in the plug-in facilitate running REST operations. End users and or external system will expect simpler workflows.</description>
    </item>
    
    <item>
      <title>Create a plug-in for a REST based web service in minutes - Part 3</title>
      <link>http://localhost:1313/articles/learn-vco/300-create-a-plug-in-for-a-rest-based-web-service-in-minutes-part-3.html</link>
      <pubDate>Wed, 25 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/articles/learn-vco/300-create-a-plug-in-for-a-rest-based-web-service-in-minutes-part-3.html</guid>
      <description>Part 1 of the plug-in generator v2 series covered how to create new plug-in inventory types, part 2 how to create their child object types. This part will focus on how to define object methods and associated workflows. Having Orchestrator inventory types is a necessity to use with vRealize Automation (formerly vCAC) Advanced Service Designer. Once you have these inventory objects you may wonder how to use these in workflows. This is what this article covers.</description>
    </item>
    
    <item>
      <title>Create a plug-in for a REST based web service in minutes - Part 2</title>
      <link>http://localhost:1313/articles/learn-vco/299-create-a-plug-in-for-a-rest-based-web-service-in-minutes-part-2.html</link>
      <pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/articles/learn-vco/299-create-a-plug-in-for-a-rest-based-web-service-in-minutes-part-2.html</guid>
      <description>In the part 1 I walk through step by step to create a plug-in object type leveraging the Plug-in Generator version 2.
In this article I will demonstrate one of the new feature of this version 2 : Create a child object type.
Having the plug-in inventory organized in a tree view allows to represent most of the objects hierarchies found in applications APIs.
Resuming from part 1 I need to create a vNIC object.</description>
    </item>
    
    <item>
      <title>Create a plug-in for a REST based web service in minutes - part 1</title>
      <link>http://localhost:1313/articles/learn-vco/298-create-a-plug-in-for-a-rest-web-service-in-minutes.html</link>
      <pubDate>Mon, 16 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/articles/learn-vco/298-create-a-plug-in-for-a-rest-web-service-in-minutes.html</guid>
      <description>In aÂ previous articleI have explained how Dynamic Types work and how these are very useful to create a vCO / vRO plugin that will enable the XaaS capabilitites of vCAC / vRA.Then explained how to build your own twitter plug-in using the plug-in generator package. I have now extended the capabilities of the plug-in generator and will attempt to demonstrate these in this new series of articles. This article use NSX as the orchestrated endpoint but following the explanation included on this tutorial you should be able to get it to work with many REST web service.</description>
    </item>
    
  </channel>
</rss>